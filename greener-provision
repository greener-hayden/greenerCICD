#!/bin/bash
# Greener CI/CD CLI - Provisions secrets to GitHub repos via Cloudflare Worker
set -euo pipefail

WORKER_URL="${WORKER_URL:-https://greener-cicd-webhook-proxy.workers.dev}"
VERSION="1.0.0"
RED='\033[0;31m'; GREEN='\033[0;32m'; BLUE='\033[0;34m'; NC='\033[0m'

log_info() { echo -e "${BLUE}ℹ${NC} $1"; }
log_success() { echo -e "${GREEN}✓${NC} $1"; }
log_error() { echo -e "${RED}✗${NC} $1" >&2; }

show_usage() {
    cat << EOF
Greener CI/CD Secret Provisioning v$VERSION

USAGE: $0 [OPTIONS] [REPOSITORIES...]

OPTIONS:
    -h, --help      Show this help
    -y, --yes       Skip confirmation
    -i              Interactive mode
    -w URL          Custom worker URL

EXAMPLES:
    $0                                # Interactive mode
    $0 -y owner/repo1 owner/repo2     # Direct provisioning

Provisions: GREENER_CI_KEY, GREENER_CI_SECRET, GREENER_API_TOKEN, GREENER_APP_ID, GREENER_INSTALLATION_ID
EOF
}

check_prerequisites() {
    command -v gh &>/dev/null || { log_error "GitHub CLI not installed. Visit: https://cli.github.com/"; exit 1; }
    gh auth status &>/dev/null || { log_error "Not authenticated. Run: gh auth login"; exit 1; }
    (command -v curl &>/dev/null || command -v wget &>/dev/null) || { log_error "curl or wget required"; exit 1; }
}

validate_repo() { [[ "$1" =~ ^[A-Za-z0-9._-]+/[A-Za-z0-9._-]+$ ]]; }
get_github_token() { gh auth token || { log_error "Failed to get GitHub token"; exit 1; }; }

# Make HTTP request
http_post() {
    local url="$1" data="$2" token="$3"
    if command -v curl &>/dev/null; then
        curl -s -w "\n%{http_code}" -X POST -H "Content-Type: application/json" \
             -H "Authorization: Bearer $token" -d "$data" "$url" 2>/dev/null
    elif command -v wget &>/dev/null; then
        local tmpfile=$(mktemp)
        wget -q -O "$tmpfile" --header="Content-Type: application/json" \
             --header="Authorization: Bearer $token" --post-data="$data" \
             --server-response "$url" 2>&1 | grep "HTTP/" | tail -1 | awk '{print $2}' > "${tmpfile}.code"
        cat "$tmpfile"
        cat "${tmpfile}.code" 2>/dev/null || echo "000"
        rm -f "$tmpfile" "${tmpfile}.code"
    fi
}

select_repositories() {
    log_info "Fetching your repositories..."
    local repos=$(gh repo list --limit 100 --json name,owner --jq '.[] | "\(.owner.login)/\(.name)"' | sort)
    [[ -z "$repos" ]] && { log_error "No repositories found"; exit 1; }
    echo -e "\nSelect repositories (comma-separated numbers or 'all'):"
    echo "$repos" | nl -w2 -s'. '
    read -p "Selection: " selection
    if [[ "$selection" == "all" ]]; then
        echo "$repos"
    else
        IFS=',' read -ra nums <<< "$selection"
        for num in "${nums[@]}"; do echo "$repos" | sed -n "${num}p"; done | grep -v '^$'
    fi
}

provision_repository() {
    local repo="$1" token="$2"
    log_info "Provisioning: $repo"
    local response=$(http_post "$WORKER_URL/api/cli-provision" "{\"repository\": \"$repo\"}" "$token")
    local http_code=$(echo "$response" | tail -1)
    case "$http_code" in
        200|201) log_success "Successfully provisioned $repo"; return 0 ;;
        401) log_error "Authentication failed for $repo"; return 1 ;;
        403) log_error "Access denied for $repo"; return 1 ;;
        404) log_error "Repository not found: $repo"; return 1 ;;
        429) log_error "Rate limited"; sleep 60; provision_repository "$repo" "$token" ;;
        *) log_error "Failed to provision $repo (HTTP $http_code)"; return 1 ;;
    esac
}

main() {
    local INTERACTIVE=false ASSUME_YES=false repos=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help) show_usage; exit 0 ;;
            -y|--yes) ASSUME_YES=true; shift ;;
            -i) INTERACTIVE=true; shift ;;
            -w) WORKER_URL="$2"; shift 2 ;;
            *) validate_repo "$1" && repos+=("$1") || log_error "Invalid repo: $1"; shift ;;
        esac
    done
    check_prerequisites
    if [[ "$INTERACTIVE" == "true" ]] || [[ ${#repos[@]} -eq 0 && "$ASSUME_YES" != "true" ]]; then
        mapfile -t repos < <(select_repositories)
    fi
    [[ ${#repos[@]} -eq 0 ]] && { log_error "No repositories specified"; exit 1; }
    if [[ "$ASSUME_YES" != "true" ]]; then
        echo -e "\nRepositories to provision:"
        printf "  - %s\n" "${repos[@]}"
        read -p "Continue? [y/N]: " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && { echo "Cancelled"; exit 0; }
    fi
    local token=$(get_github_token) success=0 total=${#repos[@]}
    for repo in "${repos[@]}"; do
        provision_repository "$repo" "$token" && ((success++))
    done
    echo -e "\n${GREEN}Complete:${NC} $success/$total repositories provisioned"
    [[ $success -eq $total ]] && exit 0 || exit 1
}

main "$@"