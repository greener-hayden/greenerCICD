#!/bin/bash

# Greener CI/CD CLI Provisioning Tool
# Provisions CI/CD secrets to repositories via Cloudflare Worker

set -euo pipefail

# Configuration
WORKER_URL="https://greener-cicd-webhook-proxy.workers.dev"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

log_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

log_error() {
    echo -e "${RED}âœ—${NC} $1" >&2
}

log_header() {
    echo -e "\n${BOLD}$1${NC}"
}

# Check prerequisites
check_prerequisites() {
    log_header "Checking Prerequisites"

    # Check if gh CLI is installed
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) is not installed"
        log_info "Install from: https://cli.github.com/"
        exit 1
    fi
    log_success "GitHub CLI found"

    # Check if user is authenticated
    if ! gh auth status &> /dev/null; then
        log_error "Not authenticated with GitHub CLI"
        log_info "Run: gh auth login"
        exit 1
    fi
    log_success "GitHub CLI authenticated"

    # Check if jq is available for JSON parsing
    if ! command -v jq &> /dev/null; then
        log_error "jq is required for JSON parsing"
        log_info "Install jq: https://stedolan.github.io/jq/download/"
        exit 1
    fi
    log_success "jq found"
}

# Get user's repositories
get_repositories() {
    log_header "Fetching Your Repositories"

    local repos
    repos=$(gh repo list --limit 100 --json name,owner,isPrivate,pushedAt | jq -r '.[] | "\(.owner.login)/\(.name) (\(if .isPrivate then "private" else "public" end))"' | sort)

    if [[ -z "$repos" ]]; then
        log_error "No repositories found"
        exit 1
    fi

    echo "$repos"
}

# Interactive repository selection
select_repositories() {
    log_header "Select Repositories to Provision"

    local repos
    repos=$(get_repositories)

    echo "Available repositories:"
    echo "$repos" | nl -w2 -s'. '
    echo

    read -p "Enter repository numbers (comma-separated, or 'all'): " selection

    if [[ "$selection" == "all" ]]; then
        echo "$repos" | sed 's/ (.*//'
        return
    fi

    # Parse selected numbers
    local selected_repos=()
    IFS=',' read -ra NUMBERS <<< "$selection"
    for num in "${NUMBERS[@]}"; do
        num=$(echo "$num" | xargs) # trim whitespace
        if [[ "$num" =~ ^[0-9]+$ ]]; then
            local repo
            repo=$(echo "$repos" | sed -n "${num}p" | sed 's/ (.*//')
            if [[ -n "$repo" ]]; then
                selected_repos+=("$repo")
            else
                log_warning "Invalid selection: $num"
            fi
        else
            log_warning "Invalid input: $num"
        fi
    done

    if [[ ${#selected_repos[@]} -eq 0 ]]; then
        log_error "No valid repositories selected"
        exit 1
    fi

    printf '%s\n' "${selected_repos[@]}"
}

# Get GitHub token
get_github_token() {
    local token
    token=$(gh auth token)
    if [[ -z "$token" ]]; then
        log_error "Failed to get GitHub token"
        exit 1
    fi
    echo "$token"
}

# Provision secrets for a repository
provision_repository() {
    local repo="$1"
    local token="$2"

    log_info "Provisioning secrets for $repo..."

    # Call worker CLI API endpoint
    local response
    response=$(curl -s -w "%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $token" \
        -d "{\"repository\": \"$repo\"}" \
        "$WORKER_URL/api/cli-provision" || echo "000")

    local http_code="${response: -3}"
    local body="${response%???}"

    case "$http_code" in
        200|201)
            log_success "Successfully provisioned secrets for $repo"
            if [[ -n "$body" ]] && echo "$body" | jq . &> /dev/null; then
                local secrets
                secrets=$(echo "$body" | jq -r '.secrets[]? // empty' 2>/dev/null || echo "")
                if [[ -n "$secrets" ]]; then
                    log_info "Provisioned secrets: $(echo "$secrets" | tr '\n' ' ')"
                fi
            fi
            return 0
            ;;
        401)
            log_error "Authentication failed for $repo"
            return 1
            ;;
        403)
            log_error "Access denied for $repo (check permissions)"
            return 1
            ;;
        404)
            log_error "Repository not found: $repo"
            return 1
            ;;
        429)
            log_warning "Rate limited, waiting 60 seconds..."
            sleep 60
            provision_repository "$repo" "$token"
            ;;
        *)
            log_error "Failed to provision $repo (HTTP $http_code)"
            if [[ -n "$body" ]]; then
                log_error "Response: $body"
            fi
            return 1
            ;;
    esac
}

# Main provisioning logic
provision_secrets() {
    local repositories=("$@")
    local token
    token=$(get_github_token)

    log_header "Provisioning CI/CD Secrets"
    log_info "Worker URL: $WORKER_URL"
    log_info "Repositories: ${#repositories[@]}"
    echo

    local success_count=0
    local total_count=${#repositories[@]}

    for repo in "${repositories[@]}"; do
        if provision_repository "$repo" "$token"; then
            ((success_count++))
        fi
        echo
    done

    log_header "Provisioning Complete"
    log_info "Successfully provisioned: $success_count/$total_count repositories"

    if [[ $success_count -lt $total_count ]]; then
        log_warning "Some repositories failed. Check permissions and repository access."
        exit 1
    fi

    log_success "All repositories provisioned successfully!"
}

# Usage information
show_usage() {
    cat << EOF
Greener CI/CD Secret Provisioning Tool

USAGE:
    $0 [OPTIONS]

OPTIONS:
    -r, --repos REPO1,REPO2    Comma-separated list of repositories (owner/name format)
    -i, --interactive          Interactive repository selection (default)
    -w, --worker-url URL       Custom worker URL (default: $WORKER_URL)
    -h, --help                 Show this help message

EXAMPLES:
    $0                                    # Interactive mode
    $0 -r myorg/repo1,myorg/repo2        # Provision specific repositories
    $0 -w https://my-worker.dev -i       # Custom worker URL

SETUP:
    1. Install GitHub CLI: https://cli.github.com/
    2. Install jq: https://stedolan.github.io/jq/
    3. Authenticate: gh auth login
    4. Run this script

The script will provision these secrets to each repository:
    - GREENER_CI_KEY
    - GREENER_CI_SECRET
    - GREENER_API_TOKEN
    - GREENER_APP_ID
    - GREENER_INSTALLATION_ID
EOF
}

# Parse command line arguments
main() {
    local repos_arg=""
    local interactive=true

    while [[ $# -gt 0 ]]; do
        case $1 in
            -r|--repos)
                repos_arg="$2"
                interactive=false
                shift 2
                ;;
            -i|--interactive)
                interactive=true
                shift
                ;;
            -w|--worker-url)
                WORKER_URL="$2"
                shift 2
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done

    # Header
    log_header "ðŸŒ± Greener CI/CD Secret Provisioning"

    # Check prerequisites
    check_prerequisites

    # Get repositories to provision
    local repositories=()
    if [[ "$interactive" == "true" ]]; then
        readarray -t repositories < <(select_repositories)
    else
        if [[ -z "$repos_arg" ]]; then
            log_error "Repository list required when not in interactive mode"
            show_usage
            exit 1
        fi
        IFS=',' read -ra repositories <<< "$repos_arg"
    fi

    if [[ ${#repositories[@]} -eq 0 ]]; then
        log_error "No repositories selected"
        exit 1
    fi

    # Provision secrets
    provision_secrets "${repositories[@]}"
}

# Run main function
main "$@"