name: Sync GitHub App Secrets

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight
  push:
    paths:
      - '.github/app-installations.json'  # Trigger when installations list changes

permissions:
  contents: read

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/app-installations.json
            .github/scripts

      - name: Generate app token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID || secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Sync secrets to repositories
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_ID: ${{ secrets.APP_ID }}
        run: |
          echo "🔄 Starting GitHub App secret sync"

          # Create installations file if it doesn't exist
          INSTALLATIONS_FILE=".github/app-installations.json"
          if [ ! -f "$INSTALLATIONS_FILE" ]; then
            echo '{"repositories": {}, "updated": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > "$INSTALLATIONS_FILE"
          fi

          # Get all repositories where the app is installed
          echo "📋 Fetching installed repositories..."
          INSTALLED_REPOS=$(gh api "/app/installations" --jq '.[].id' | while read -r INST_ID; do
            gh api "/app/installations/$INST_ID/repositories" --jq '.repositories[].full_name'
          done | sort -u)

          # Process each repository
          for REPO in $INSTALLED_REPOS; do
            echo ""
            echo "📦 Processing $REPO"

            # Check if secrets already exist (handshake check)
            EXISTING_SECRETS=$(gh api "/repos/$REPO/actions/secrets" --jq '.secrets[].name' 2>/dev/null || echo "")

            # Check if this repo already has our secrets
            if echo "$EXISTING_SECRETS" | grep -q "GREENER_CI_KEY"; then
              echo "  ✓ Repository already configured"

              # Check if we need to rotate secrets (optional, based on age)
              LAST_UPDATED=$(jq -r ".repositories[\"$REPO\"].updated // \"never\"" "$INSTALLATIONS_FILE" 2>/dev/null)
              if [ "$LAST_UPDATED" != "never" ]; then
                DAYS_OLD=$(( ($(date +%s) - $(date -d "$LAST_UPDATED" +%s)) / 86400 ))
                if [ $DAYS_OLD -lt 30 ]; then
                  echo "  ℹ️  Secrets are $DAYS_OLD days old, skipping rotation"
                  continue
                fi
                echo "  🔄 Rotating secrets (>30 days old)"
              fi
            else
              echo "  🆕 First-time setup for this repository"
            fi

            # Generate unique secrets for this repository
            CI_KEY=$(openssl rand -hex 32)
            CI_SECRET=$(openssl rand -hex 64)
            API_TOKEN=$(openssl rand -hex 32)
            INSTALLATION_ID=$(gh api "/repos/$REPO/installation" --jq '.id')

            # Store metadata locally (for tracking/auditing)
            jq --arg repo "$REPO" \
               --arg key_hash "$(echo -n $CI_KEY | sha256sum | cut -d' ' -f1)" \
               --arg updated "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
               --arg inst_id "$INSTALLATION_ID" \
               '.repositories[$repo] = {
                 "key_hash": $key_hash,
                 "updated": $updated,
                 "installation_id": $inst_id
               }' "$INSTALLATIONS_FILE" > tmp.json && mv tmp.json "$INSTALLATIONS_FILE"

            # Set secrets in the repository
            echo "  🔐 Setting secrets..."

            # Create secrets using gh CLI (handles encryption automatically)
            echo "$CI_KEY" | gh secret set GREENER_CI_KEY --repo "$REPO" 2>/dev/null && echo "    ✅ GREENER_CI_KEY"
            echo "$CI_SECRET" | gh secret set GREENER_CI_SECRET --repo "$REPO" 2>/dev/null && echo "    ✅ GREENER_CI_SECRET"
            echo "$API_TOKEN" | gh secret set GREENER_API_TOKEN --repo "$REPO" 2>/dev/null && echo "    ✅ GREENER_API_TOKEN"
            echo "$APP_ID" | gh secret set GREENER_APP_ID --repo "$REPO" 2>/dev/null && echo "    ✅ GREENER_APP_ID"
            echo "$INSTALLATION_ID" | gh secret set GREENER_INSTALLATION_ID --repo "$REPO" 2>/dev/null && echo "    ✅ GREENER_INSTALLATION_ID"

            echo "  ✨ Repository configured successfully!"
          done

          # Update the installations file with sync timestamp
          jq '.synced = "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"' "$INSTALLATIONS_FILE" > tmp.json && mv tmp.json "$INSTALLATIONS_FILE"

          # Commit the updated installations file (optional - for tracking)
          if [ -n "$(git status --porcelain "$INSTALLATIONS_FILE")" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add "$INSTALLATIONS_FILE"
            git commit -m "🔄 Update app installations tracking [skip ci]"
            git push
          fi

          echo ""
          echo "✅ Secret sync complete!"
          echo "📊 Processed $(echo "$INSTALLED_REPOS" | wc -w) repositories"